
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，
" 请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
" set relativenumber  

" 开启鼠标
set mouse=a

" 设置光标所在列高亮
" set cursorcolumn


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 配置indentLine插件
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"开启代码对齐线
let g:indentLine_enabled = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 配置markdown插件
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 配置Doxygen插件
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
let g:DoxygenToolkit_authorName="coco-linux, 2673483151@qq.com"
let s:licenseTag = "Copyright(C)\<enter>"
let s:licenseTag = s:licenseTag . "For free\<enter>"
let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
let g:DoxygenToolkit_licenseTag = s:licenseTag
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:doxygen_enhanced_color=1
let g:DoxygenToolkit_commentType="Qt"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 配置NERDCommenter插件
" C/C++代码注释插件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"NERDCommenter
"
"介绍:
"简单介绍下NERD Commenter的常用键绑定，以C/C++文件为例，
"详析的使用方法，请:help NERDCommenter。
"
"使用
"方法:
"NERDCommenter的常用键绑定，以C/C++文件为例。
"在Normal
"或者
"Visual模式下：
" ,ca在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//
" ,cc注释当前行
" ,c<space> 切换注释/非注释状态
" ,cs 以”性感”的方式注释
" ,cA 在当前行尾添加注释符，并进入Insert模式
" ,cu 取消注释
" ,c$ 从光标开始到行尾注释  ，这个要说说因为c$也是从光标
" 到行尾的快捷键，这个按过逗号（，）要快一点按c$
" 2,cc 光标以下count行添加注释
" 2,cu 光标以下count行取消注释
" 2,cm:光标以下count行添加块注释(2,cm)
" <leader>c<space>  加上/解开注释, 智能判断
" <leader>cy   先复制, 再注解(p可以进行黏贴)
"
" 注意
" 事项:
"      在进行多行块注释时若想使用//在开头进行注释
"      则需要额外在.vinrc中配置如下几行
"      我这里使用的Leader键是逗号
"
"配置:

"让注释符和语句之间留有一个空格
let NERDSpaceDelims=1

"将行注释符左对齐
let g:NERDDefaultAlign='left'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 配置高亮匹配括号的插件
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" vim-rainbow_parentheses
" 作用:
" 高亮另一半括号(小括号/中括号/大括号)
" 使用:
" 注意
" 事项:
"     不建议配置快捷键, 当做被动属性, 省心省事
"     开启16对括号匹配一般就够了
"     可以根据自己需求, 确认<>是否开启, 具体见github文档
"     被动(虽然支持主动触发), 可以设定括号高亮展示, 包括()[]{}<>
"
" 配置:
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

" 			不加入这行, 防止黑色括号出现, 很难识别
" 			\ ['black',       'SeaGreen3'],

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" 在打开Vim后自动启用rainbow_parenthsis插件的多色彩括号匹配功能
autocmd VimEnter * RainbowParenthesesToggle


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" C，C++ 按F6编译运行
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
map <F6> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!gcc -Wall % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ -Wall % -o %<"
        exec "! ./%<"
    endif
endfunc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 按F7进行C、C++的调试
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
map <F7> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
    if &filetype == 'c'
        exec "!gcc -Wall % -o %< -g"
    elseif &filetype == 'cpp'
        exec "!g++ -Wall % -o %< -g"
    endif
    exec "!gdb ./%<"
endfunc     


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 按F8按照ANSI标准进行代码格式化
" 使用该功能之前，确保你的系统中安装了astyle.
" 如果没有安装，则可以使用如下命令安装：
" sudo apt install astyle
" 要使用python就要下载python-autopep8：
"  sudo apt install python-autopep8
" 具体的代码风格作者可以看：
" http://astyle.sourceforge.net/astyle.html#_style=kr
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
map <F8> :call FormatCode()<CR>
func! FormatCode()
    exec "w"
    if &filetype == 'c' || &filetype == 'h'
		!astyle --mode=c --style=allman -s4 -S -L -xW -w -Y -M119 -p -H -U -xe -k3 -W3 -y -j %
    elseif &filetype == 'cpp' || &filetype == 'cc' || &filetype == 'hpp'
		 exec "!astyle --mode=c --style=allman -s4 -S -L -xW -w -Y -M119 -p -H -U -xe -k3 -W3 -y -j -xk -C -N -xy -xC200 %"
    elseif &filetype == 'perl'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'py'|| &filetype == 'python'
        "exec "!autopep8 --in-place --aggressive %"
        exec "!autopep8 --in-place --aggressive --aggressive %"
    elseif &filetype == 'java'
        exec "!astyle --style=java %"
    elseif &filetype == 'jsp'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'xml'
        exec "!astyle --style=gnu --suffix=none %"
    else
        exec "normal gg=G"
        return
    endif
endfunc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置为文件添加头部信息
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
func Setfilehead()
    call append(0, '/***********************************************')
    call append(1, '#')
    call append(2, '#	文件名: '.expand("%"))
    call append(3, '#')
    call append(4, '#	作者是: coco-linux')
	call append(5, '#   邮箱是: 2673483151@qq.com')
	call append(6, '#   创建于：'.strftime("%Y年%m月%d日"))
    call append(7, '#	描述是: --- ')
    call append(8, '***********************************************/')
	call append(9, '')
endfunc
"autocmd创建新文件自动调用setfilehead()函数插入头文件信息
autocmd BufNewFile *.v,*.sv,*.cpp,*.c,*.h exec ":call Setfilehead()"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置vim-trailing-whitespace
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" 作用:
"    红色高亮行尾的空格，也可以一键去除文件中所有行行尾空格。
" 被动技能:
"         自动高亮行尾的空格
" 主动技能:
"         绑定<leader><space>为快捷键,一键去除所有行尾空格
" 配置:
map <leader><space> :FixWhitespace<cr>


"======================================================================
"				HarmonyVim中配置Linux kernel补全环境
"                                开始
"======================================================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 自动索引插件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"如果检测到如下文件后缀则认为它是一个工程项目
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project', '.gitignore']


" 添加ctags额外参数，会让tags文件变大
" let g:gutentags_ctags_extra_args = ['--fields=+niazlS', '--extra=+q']
let g:gutentags_ctags_extra_args = ['--fields=+niazlS']
let g:gutentags_ctags_extra_args = ['--fields=+lS']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 自动保存linux kernel的ctags文件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
if isdirectory("kernel/") && isdirectory("mm/")
    let g:gutentags_file_list_command = 'find arch/arm/ mm/ kernel/ include/ init/ lib/ dirves/base/ dirves/platform'
    au BufWritePost *.c,*.h silent! !ctags -L tags.files&
    au BufWritePost *.c,*.h silent! !cscope -bkg -i tags.files&
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctags
" 扫描指定的源文件，找出其中所包含的语法元素，并将找到的相关内容记录下来。
" 如果没有安装，则使用以下命令安装:
" sudo apt-get install ctags
" 自动从指定的目录中加载ctags
" ctags: ctags -R //生成索引文件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
if filereadable("tags")
    " set tags=tags
	" 表示在当前工作目录下搜索tags文件
	" set tags+=./tags
    " 根据自己的文件路劲进行修改
	" 表示在搜寻tags文件的时候，也要搜寻例如:~/arm/linux-2.6.24.7/文件夹下的tags文件。
	" 在执行ctags -R并生成tags文件后，不要将tags文件移动到其他目录，否则CTRL+]时，会提示找不到源码文件。
	set tags=/home/coco-linux/linux-kernel/linux-kernel-4.1.15/tags
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" global:建立数据库
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
if filereadable("GTAGS")
    set cscopetag
    set cscopeprg=gtags-cscope
    cs add GTAGS
    au BufWritePost *.c,*.cpp,*.h silent! !global -u &
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 建立内核符号数据库
" 以及cscope的使用方法
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=1
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        " cs add cscope.out
        " 根据自己的文件路径进行修改"
        cs add /home/coco-linux/linux-kernel/linux-kernel-4.1.15/cscope.out
    endif
    set csverb
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope:建立数据库：cscope -Rbq；
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"       F9 查找c符号； 		F10 查找字符串；
"       F11 查找函数定义； 	F12 查找函数谁调用了，
"cscope -Rbkq<回车>
" R 表示把所有子目录里的文件也建立索引 
" b 表示cscope不启动自带的用户界面，而仅仅建立符号数据库 
" q生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度 
" k在生成索引文件时，不搜索/usr/include目录
" 在源码根目录下打开任意.c文件，使用如下命令： 
" Ctrl+]将跳到光标所在变量或函数的定义处 Ctrl+T返回 
" ：cs find s ---- 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
" ：cs find g ---- 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
" ：cs find d ---- 查找本函数调用的函数
" ：cs find c ---- 查找调用本函数的函数
" ：cs find t ---- 查找指定的字符串
" ：cs find e ---- 查找egrep模式，相当于egrep功能，但查找速度快多了
" ：cs find f ---- 查找并打开文件，类似vim的find功能
" ：cs find i ---- 查找包含本文件的文件 
" 命令也可以且按銉来实现:
" Ctrl+空格 再按 s 表示：cs find s命令 
" 同理实现cs find + g,d,c,t,e,f,i命令
"   下列是各键的含义
"   s --- symbol 符号
"   g --- globals 全局变量
"   c --- calls 调用自己的
"   t --- text 文本引用
"   e --- egrep 做egrep 搜索
"   f --- file 打开在光标处的文件
"   i --- includes 查找include所在光标处文件名的文件
"   d --- called 查找本函数调用的所有函数实现
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

:set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" F11 查找c符号；F10 查找字符串；F9 查找函数定义；F12 查找函数谁调用了。
" nmap <silent> <F11> :cs find s <C-R>=expand("<cword>")<CR><CR> :botright copen<CR><CR>
nmap <silent> <F10> :cs find t <C-R>=expand("<cword>")<CR><CR> :botright copen<CR><CR>
nmap <silent> <F9> :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <silent> <F12> :cs find c <C-R>=expand("<cword>")<CR><CR> :botright copen<CR><CR>
"======================================================================
"				HarmonyVim中配置Linux kernel环境
" 							 结束
"======================================================================
